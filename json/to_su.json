    {
        "id": "625e0c3cc5957e33",
        "type": "subflow",
        "name": "To_SmartUnity",
        "info": "Converts packets from Node-Red to SmartUnity\r\n\r\n\r\n### Inputs\r\n\r\n: payload (any) : Standart payload.\r\n: *topic* (string | number) :  ID.\r\n\r\n### Outputs\r\n\r\n: payload (string) : TCP-packet to SmartUnity\r\n\r\n### Configuration\r\n\r\n#### **Address list**\r\n\r\nThe json file maps the msg.topic and the object ID in Project Builder.\r\n\r\n- The **key** must contain a KNX group address or address in another system.\r\n- The **value** must contain the Project Builder object ID.\r\n\r\n**Examples:**\r\n\r\n- **KNX**:\r\n`{\r\n    \"0/1/1\": 1024,\r\n    \"0/1/2\": 1025\r\n}`\r\n\r\n- **Other Systems**:\r\n`{\r\n    \"topic_1\": 1026,\r\n    \"topic_2\": 1027\r\n}`\r\n\r\n\r\n---\r\n\r\n\r\n#### **Type list**\r\n\r\nThe json file maps the msg.topic and the object type in Project Builder.\r\n\r\n**Example:**\r\n\r\n`{\r\n    \"topic_1\": \"T_SWITCH_BUTTON\",\r\n    \"topic_2\": \"T_SWITCH_BUTTON\"\r\n}`\r\n\r\n\r\n---\r\n\r\n\r\n#### **Setpoint delay**\r\n\r\nDelay before sending setpoint (in seconds).\r\n\r\nValid only for the following types:\r\n- **T_UNIV_AN_INPUT_setpoint**\r\n- **T_SIMPLE_ANALOG_IN_setpoint**\r\n- **T_TEMPERATURE_DETECTOR_setpoint**\r\n\r\n`Available range:` **0 - 120 sec**\r\n\r\n`Default delay:` **15 sec**\r\n\r\n`note:` **0 = no delay**\r\n\r\n---\r\n\r\n\r\n#### **Shift (HELP_OBJECT)**\r\n\r\nThe shift is added to the received value.\r\n\r\n**output value = recieved value + shift**\r\n\r\nApplies only to objects of the **HELP_OBJECT** type.\r\n\r\n`Available range:` **-10 - 10**\r\n\r\n`Default shift:` **0**\r\n\r\n---\r\n\r\n\r\n#### **Factor**\r\n\r\nAll analog values are multiplied by the factor.\r\n\r\n**output value = recieved value * factor**\r\n\r\nApplies to all analog object types.\r\n\r\n`Available range:` **0 - 1000**\r\n\r\n`Default factor:` **10**",
        "category": "SmartUnity",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": [
                    {
                        "id": "74125a3badeef3bc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 140,
                "wires": [
                    {
                        "id": "4149af24579f0dc5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESSES",
                "type": "json",
                "value": "{}",
                "ui": {
                    "icon": "font-awesome/fa-list",
                    "label": {
                        "ru": "Address list"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "TYPES",
                "type": "json",
                "value": "{}",
                "ui": {
                    "icon": "font-awesome/fa-file-code-o",
                    "label": {
                        "ru": "Type list"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "SETPOINT_DELAY",
                "type": "num",
                "value": "15",
                "ui": {
                    "icon": "font-awesome/fa-clock-o",
                    "label": {
                        "ru": "Delay to send setpoint"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 120
                    }
                }
            },
            {
                "name": "HELP_OBJECT_SHIFT",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-arrows-v",
                    "label": {
                        "ru": "Shift (HELP_OBJECT)"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": -10,
                        "max": 10
                    }
                }
            },
            {
                "name": "VALUE_FACTOR",
                "type": "num",
                "value": "10",
                "ui": {
                    "icon": "font-awesome/fa-asterisk",
					"label": {
                        "ru": "Factor"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 1000
                    }
                }
            }
        ],
        "meta": {
            "type": "Converter to SU",
            "version": "1.2.7",
            "author": "@on_sheff Anton Shefov <a.shefov@gmail.com>",
            "desc": "Converter from any object types to SmartUnity",
            "license": "MIT",
            "keywords": "SmartUnity, SU"
        },
        "color": "#3BB08F",
		"icon": "font-awesome/fa-sign-in",
		"inputLabels": [
            "from_nodes"
        ],
        "outputLabels": [
            "to_SU"
        ],
        "status": {
            "x": 840,
            "y": 220,
            "wires": [
                {
                    "id": "f76087063cc73ed0",
                    "port": 1
                }
            ]
        },
		"flow":[
			{
        "id": "4149af24579f0dc5",
        "type": "binary",
        "z": "625e0c3cc5957e33",
        "name": "",
        "property": "payload",
        "pattern": "l16=>start,l16 => obj, l16 => cmd, x16, x16,l16=>len,l16=>val",
        "x": 870,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "738ff25c657b58ce",
        "type": "switch",
        "z": "625e0c3cc5957e33",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "setpoint",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 355,
        "y": 140,
        "wires": [
            [
                "8b1d68eb65699eb2"
            ],
            [
                "f76087063cc73ed0"
            ]
        ],
        "l": false
    },
    {
        "id": "55fb993c57f0f83e",
        "type": "trigger",
        "z": "625e0c3cc5957e33",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "15",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "topic",
        "topic": "object_id",
        "outputs": 1,
        "x": 515,
        "y": 100,
        "wires": [
            [
                "f76087063cc73ed0"
            ]
        ],
        "l": false
    },
    {
        "id": "8b1d68eb65699eb2",
        "type": "change",
        "z": "625e0c3cc5957e33",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "$env('SETPOINT_DELAY') * 1000",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 435,
        "y": 100,
        "wires": [
            [
                "55fb993c57f0f83e"
            ]
        ],
        "l": false
    },
    {
        "id": "f76087063cc73ed0",
        "type": "function",
        "z": "625e0c3cc5957e33",
        "name": "to_SmartUnity",
        "func": "var tmp = {};\nvar command = 0;\nvar value = 0;\nvar error = false;\nvar status = \"\";\nvar ho_shift = env.get('HELP_OBJECT_SHIFT');\n\nif (msg.type != null){\n    if (msg.payload != null){\n        switch (msg.type) {\n            case \"T_IMPULS_BUTTON\":\n                command = 6;\n                if (msg.payload) {\n                    value = 15;\n                } else {\n                    value = 16;\n                }\n                break;\n            case \"T_SWITCH_BUTTON\":\n                command = 6;\n                if (msg.payload) {\n                    value = 15;\n                } else {\n                    value = 16;\n                }\n                break;\n            case \"T_RELE\":\n                command = 17;\n                if (msg.payload) {\n                    value = 7;\n                } else {\n                    value = 6;\n                }\n                break;\n            case \"T_TEMPERATURE_DETECTOR_value\":\n                command = 40;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_INPUT_value\":\n                command = 40;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_INPUT_setpoint\":\n                command = 9;\n                value = msg.payload;\n                break;\n            case \"T_ANALOG_IN_ADVANCED_value\":\n                command = 17;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_OUTPUT\":\n                command = 17;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_OUTPUT_TO_HELP_OBJECT\":\n                command = 17;\n                value = Math.round(msg.payload / 33) + 1;\n                break;\n            case \"T_HELP_SWITCH\":\n                command = 17;\n                if (msg.payload) {\n                    value = 21;\n                } else {\n                    value = 22;\n                }\n                break;\n            case \"T_HELP_OBJECT\":\n                command = 17;\n                value = msg.payload + ho_shift;\n                break;\n            default:\n                error = true;\n                status = 'Unknown object type (' + msg.type + ') + ID: ' + msg.object_id;\n                node.error(status);\n                break;\n        }\n    } else{\n        error = true;\n        status = 'Payload is empty. ID: ' + msg.object_id;\n        node.error(status);\n    }    \n} else {\n    error = true;\n    status = 'Object type is empty. ID: ' + msg.object_id;\n    node.error(status);\n}\n\nif (msg.object_id != null){\n    if (1024 <= msg.object_id && msg.object_id <= 9999){\n        tmp.obj = msg.object_id;\n    } else{\n        error = true;\n        status = 'Object_ID is out of range. ID: ' + msg.object_id;\n        node.error(status);\n    }   \n} else {\n    error = true;\n    status = 'Object_ID is empty';\n    node.error(status);\n}\n\nif (!error){\n    status = msg.object_id + \": \" + msg.payload.toString();\n    tmp.start = 52428;\n    tmp.cmd = command;\n    tmp.len = 2;\n    tmp.val = value;\n    msg.payload = tmp;\n    return [msg, { \"payload\": { fill: \"green\", shape: \"dot\", text: status}}];\n} else {\n    return [null, { \"payload\": { fill: \"red\", shape: \"ring\", text: status }}]\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "4149af24579f0dc5"
            ],
            []
        ]
    },
    {
        "id": "74125a3badeef3bc",
        "type": "function",
        "z": "625e0c3cc5957e33",
        "name": "Parse_KNX",
        "func": "const addresses = context.get('addresses');\nconst types = context.get('types');\nconst factor = Number(env.get(\"VALUE_FACTOR\"));\nconst values_obj = [\n    \"T_UNIV_AN_INPUT_value\",\n    \"T_SIMPLE_ANALOG_IN_value\",\n    \"T_TEMPERATURE_DETECTOR_value\",\n    \"T_UNIV_AN_INPUT_setpoint\",\n    \"T_SIMPLE_ANALOG_IN_setpoint\",\n    \"T_TEMPERATURE_DETECTOR_setpoint\"\n]\nvar new_msg = {};\n\n\nfor (let key in addresses) {\n    if (msg.topic == key) {\n        new_msg.object_id = addresses[key];\n        new_msg.type = types[key];\n        if (values_obj.includes(types[key])) {\n            new_msg.payload = Math.round(msg.payload * factor);\n        } else {\n            new_msg.payload = msg.payload;\n        }\n        return new_msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\ncontext.set('addresses', env.get('ADDRESSES'));\ncontext.set('types', env.get('TYPES'));",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "738ff25c657b58ce"
            ]
        ]
    }
		]
    }
