{
    "id": "625e0c3cc5957e33",
    "type": "subflow",
    "name": "To_SmartUnity",
    "info": "Converts packets from Node-Red to SmartUnity\r\n\r\n\r\n### Inputs\r\n\r\n: payload (any) : Standart payload.\r\n: *topic* (string | number) :  ID.\r\n\r\n### Outputs\r\n\r\n: payload (string) : TCP-packet to SmartUnity\r\n\r\n### Configuration\r\n\r\n#### **Address list**\r\n\r\nThe json file maps the msg.topic and the object ID in Project Builder.\r\n\r\n- The **key** must contain a KNX group address or address in another system.\r\n- The **value** must contain the Project Builder object ID.\r\n\r\n**Examples:**\r\n\r\n- **KNX**:\r\n`{\r\n    \"0/1/1\": 1024,\r\n    \"0/1/2\": 1025\r\n}`\r\n\r\n- **Other Systems**:\r\n`{\r\n    \"topic_1\": 1026,\r\n    \"topic_2\": 1027\r\n}`\r\n\r\n\r\n---\r\n\r\n\r\n#### **Type list**\r\n\r\nThe json file maps the msg.topic and the object type in Project Builder.\r\n\r\n**Example:**\r\n\r\n`{\r\n    \"topic_1\": \"T_SWITCH_BUTTON\",\r\n    \"topic_2\": \"T_SWITCH_BUTTON\"\r\n}`\r\n\r\n\r\n---\r\n\r\n\r\n#### **Setpoint delay**\r\n\r\nDelay before sending setpoint (in seconds).\r\n\r\nValid only for the following types:\r\n- **T_UNIV_AN_INPUT_setpoint**\r\n- **T_SIMPLE_ANALOG_IN_setpoint**\r\n- **T_TEMPERATURE_DETECTOR_setpoint**\r\n\r\n`Available range:` **0 - 120 sec**\r\n\r\n`Default delay:` **15 sec**\r\n\r\n`note:` **0 = no delay**\r\n\r\n---\r\n\r\n\r\n#### **Shift (HELP_OBJECT)**\r\n\r\nThe shift is added to the received value.\r\n\r\n**output value = recieved value + shift**\r\n\r\nApplies only to objects of the **HELP_OBJECT** type.\r\n\r\n`Available range:` **-10 - 10**\r\n\r\n`Default shift:` **0**\r\n\r\n---\r\n\r\n\r\n#### **Factor**\r\n\r\nAll analog values are multiplied by the factor.\r\n\r\n**output value = recieved value * factor**\r\n\r\nApplies to all analog object types.\r\n\r\n`Available range:` **0 - 1000**\r\n\r\n`Default factor:` **10**",
    "category": "SmartUnity",
    "in": [
        {
            "x": 80,
            "y": 140,
            "wires": [
                {
                    "id": "c8f306b7a6df1d66"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 1090,
            "y": 160,
            "wires": [
                {
                    "id": "6cee4f89311c3621",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "ADDRESSES",
            "type": "json",
            "value": "{}",
            "ui": {
                "icon": "font-awesome/fa-list",
                "label": {
                    "ru": "Address list"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "json",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "TYPES",
            "type": "json",
            "value": "{}",
            "ui": {
                "icon": "font-awesome/fa-file-code-o",
                "label": {
                    "ru": "Type list"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "json",
                        "env"
                    ]
                }
            }
        },
        {
            "name": "SETPOINT_DELAY",
            "type": "num",
            "value": "15",
            "ui": {
                "icon": "font-awesome/fa-clock-o",
                "label": {
                    "ru": "Delay to send setpoint"
                },
                "type": "spinner",
                "opts": {
                    "min": 0,
                    "max": 120
                }
            }
        },
        {
            "name": "HELP_OBJECT_SHIFT",
            "type": "num",
            "value": "0",
            "ui": {
                "icon": "font-awesome/fa-arrows-v",
                "label": {
                    "ru": "Shift (HELP_OBJECT)"
                },
                "type": "spinner",
                "opts": {
                    "min": -10,
                    "max": 10
                }
            }
        },
        {
            "name": "VALUE_FACTOR",
            "type": "num",
            "value": "10",
            "ui": {
                "icon": "font-awesome/fa-asterisk",
                "label": {
                    "ru": "Factor"
                },
                "type": "spinner",
                "opts": {
                    "min": 0,
                    "max": 1000
                }
            }
        }
    ],
    "meta": {
        "type": "Converter to SU",
        "version": "1.3.1",
        "author": "Anton Shefov <a.shefov@gmail.com>",
        "desc": "Converter from any object types to SmartUnity",
        "license": "MIT",
        "keywords": "SmartUnity, SU"
    },
    "color": "#3BB08F",
    "icon": "font-awesome/fa-sign-in",
    "inputLabels": [
        "from_nodes"
    ],
    "outputLabels": [
        "to_SU"
    ],
    "status": {
        "x": 1060,
        "y": 220,
        "wires": [
            {
                "id": "665c296779b483c1",
                "port": 0
            },
            {
                "id": "85c9f51d2da30ffd",
                "port": 0
            },
            {
                "id": "80a5ad3061a8423a",
                "port": 0
            },
            {
                "id": "5177e369ac66ecde",
                "port": 0
            },
            {
                "id": "071fbfcd31c518c2",
                "port": 0
            }
        ]
    },
    "flow": [
        {
            "id": "738ff25c657b58ce",
            "type": "switch",
            "z": "625e0c3cc5957e33",
            "name": "",
            "property": "type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "cont",
                    "v": "setpoint",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "value",
                    "vt": "str"
                },
                {
                    "t": "cont",
                    "v": "HELP_OBJECT",
                    "vt": "str"
                },
                {
                    "t": "else"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 4,
            "x": 695,
            "y": 140,
            "wires": [
                [
                    "8b1d68eb65699eb2"
                ],
                [
                    "c66e0f2b68c6a8a4"
                ],
                [
                    "d85af456a95308fc"
                ],
                [
                    "6cee4f89311c3621"
                ]
            ],
            "l": false
        },
        {
            "id": "55fb993c57f0f83e",
            "type": "trigger",
            "z": "625e0c3cc5957e33",
            "name": "",
            "op1": "",
            "op2": "",
            "op1type": "nul",
            "op2type": "payl",
            "duration": "15",
            "extend": true,
            "overrideDelay": true,
            "units": "s",
            "reset": "",
            "bytopic": "topic",
            "topic": "object_id",
            "outputs": 1,
            "x": 885,
            "y": 40,
            "wires": [
                [
                    "6cee4f89311c3621"
                ]
            ],
            "l": false
        },
        {
            "id": "8b1d68eb65699eb2",
            "type": "change",
            "z": "625e0c3cc5957e33",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "delay",
                    "pt": "msg",
                    "to": "$env('SETPOINT_DELAY') * 1000",
                    "tot": "jsonata"
                },
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "$number(payload) * $number($env('VALUE_FACTOR'))",
                    "tot": "jsonata"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 805,
            "y": 40,
            "wires": [
                [
                    "55fb993c57f0f83e"
                ]
            ],
            "l": false
        },
        {
            "id": "74125a3badeef3bc",
            "type": "function",
            "z": "625e0c3cc5957e33",
            "name": "Parse_data",
            "func": "const addresses = env.get('ADDRESSES');\nconst types = env.get('TYPES');\n\nvar key = String(msg.topic);\n\nreturn {\"payload\" : msg.payload, \"object_id\" : addresses[key], \"type\" : types[key]};",
            "outputs": 1,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 370,
            "y": 140,
            "wires": [
                [
                    "fd0126e5946231c3"
                ]
            ]
        },
        {
            "id": "c8f306b7a6df1d66",
            "type": "switch",
            "z": "625e0c3cc5957e33",
            "name": "",
            "property": "ADDRESSES",
            "propertyType": "env",
            "rules": [
                {
                    "t": "hask",
                    "v": "$string(topic)",
                    "vt": "jsonata"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 1,
            "x": 175,
            "y": 140,
            "wires": [
                [
                    "71e42bdb80f3fb1d"
                ]
            ],
            "l": false
        },
        {
            "id": "c66e0f2b68c6a8a4",
            "type": "change",
            "z": "625e0c3cc5957e33",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "$number(payload) * $number($env('VALUE_FACTOR'))",
                    "tot": "jsonata"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 805,
            "y": 80,
            "wires": [
                [
                    "6cee4f89311c3621"
                ]
            ],
            "l": false
        },
        {
            "id": "6c95d9a55e7d7a9e",
            "type": "function",
            "z": "625e0c3cc5957e33",
            "d": true,
            "name": "to_SmartUnity",
            "func": "var tmp = {};\nvar command = 0;\nvar value = 0;\nvar error = false;\nvar status = \"\";\nvar ho_shift = env.get('HELP_OBJECT_SHIFT');\n\nif (msg.type != null){\n    if (msg.payload != null){\n        switch (msg.type) {\n            case \"T_IMPULS_BUTTON\":\n                command = 6;\n                if (msg.payload) {\n                    value = 15;\n                } else {\n                    value = 16;\n                }\n                break;\n            case \"T_SWITCH_BUTTON\":\n                command = 6;\n                if (msg.payload) {\n                    value = 15;\n                } else {\n                    value = 16;\n                }\n                break;\n            case \"T_RELE\":\n                command = 17;\n                if (msg.payload) {\n                    value = 7;\n                } else {\n                    value = 6;\n                }\n                break;\n            case \"T_TEMPERATURE_DETECTOR_value\":\n                command = 40;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_INPUT_value\":\n                command = 40;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_INPUT_setpoint\":\n                command = 9;\n                value = msg.payload;\n                break;\n            case \"T_ANALOG_IN_ADVANCED_value\":\n                command = 17;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_OUTPUT\":\n                command = 17;\n                value = msg.payload;\n                break;\n            case \"T_UNIV_AN_OUTPUT_TO_HELP_OBJECT\":\n                command = 17;\n                value = Math.round(msg.payload / 33) + 1;\n                break;\n            case \"T_HELP_SWITCH\":\n                command = 17;\n                if (msg.payload) {\n                    value = 21;\n                } else {\n                    value = 22;\n                }\n                break;\n            case \"T_HELP_OBJECT\":\n                command = 17;\n                value = msg.payload + ho_shift;\n                break;\n            default:\n                error = true;\n                status = 'Unknown object type (' + msg.type + ') + ID: ' + msg.object_id;\n                node.error(status);\n                break;\n        }\n    } else{\n        error = true;\n        status = 'Payload is empty. ID: ' + msg.object_id;\n        node.error(status);\n    }    \n} else {\n    error = true;\n    status = 'Object type is empty. ID: ' + msg.object_id;\n    node.error(status);\n}\n\nif (msg.object_id != null){\n    if (1024 <= msg.object_id && msg.object_id <= 9999){\n        tmp.obj = msg.object_id;\n    } else{\n        error = true;\n        status = 'Object_ID is out of range. ID: ' + msg.object_id;\n        node.error(status);\n    }   \n} else {\n    error = true;\n    status = 'Object_ID is empty';\n    node.error(status);\n}\n\nif (!error){\n    status = msg.object_id + \": \" + msg.payload.toString();\n    tmp.start = 52428;\n    tmp.cmd = command;\n    tmp.len = 2;\n    tmp.val = value;\n    msg.payload = tmp;\n    return [msg, { \"payload\": { fill: \"green\", shape: \"dot\", text: status}}];\n} else {\n    return [null, { \"payload\": { fill: \"red\", shape: \"ring\", text: status }}]\n}\n",
            "outputs": 2,
            "timeout": "",
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 580,
            "y": 560,
            "wires": [
                [],
                []
            ]
        },
        {
            "id": "71e42bdb80f3fb1d",
            "type": "switch",
            "z": "625e0c3cc5957e33",
            "name": "",
            "property": "payload",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "nnull"
                },
                {
                    "t": "else"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 2,
            "x": 245,
            "y": 140,
            "wires": [
                [
                    "74125a3badeef3bc"
                ],
                [
                    "85c9f51d2da30ffd"
                ]
            ],
            "l": false
        },
        {
            "id": "fd0126e5946231c3",
            "type": "switch",
            "z": "625e0c3cc5957e33",
            "name": "",
            "property": "type",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "nnull"
                },
                {
                    "t": "else"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 2,
            "x": 495,
            "y": 140,
            "wires": [
                [
                    "bb9231a6ca8c0069"
                ],
                [
                    "665c296779b483c1"
                ]
            ],
            "l": false
        },
        {
            "id": "d85af456a95308fc",
            "type": "change",
            "z": "625e0c3cc5957e33",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "payload",
                    "pt": "msg",
                    "to": "$number(payload) + $number($env('HELP_OBJECT_SHIFT'))",
                    "tot": "jsonata"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 805,
            "y": 120,
            "wires": [
                [
                    "6cee4f89311c3621"
                ]
            ],
            "l": false
        },
        {
            "id": "85c9f51d2da30ffd",
            "type": "template",
            "z": "625e0c3cc5957e33",
            "name": "Payload is empty",
            "field": "payload",
            "fieldType": "msg",
            "format": "json",
            "syntax": "mustache",
            "template": "{\n    \"fill\": \"red\",\n    \"shape\": \"dot\",\n    \"text\": \"Payload is empty. ID: {{object_id}}\"\n}",
            "output": "json",
            "x": 870,
            "y": 400,
            "wires": [
                []
            ]
        },
        {
            "id": "665c296779b483c1",
            "type": "template",
            "z": "625e0c3cc5957e33",
            "name": "Object type is empty",
            "field": "payload",
            "fieldType": "msg",
            "format": "json",
            "syntax": "mustache",
            "template": "{ \n    \"fill\": \"red\",\n    \"shape\": \"dot\",\n    \"text\": \"Object type is empty. ID: {{object_id}}\"\n}",
            "output": "json",
            "x": 860,
            "y": 340,
            "wires": [
                []
            ]
        },
        {
            "id": "80a5ad3061a8423a",
            "type": "template",
            "z": "625e0c3cc5957e33",
            "name": "OK",
            "field": "payload",
            "fieldType": "msg",
            "format": "json",
            "syntax": "mustache",
            "template": "{\n    \"fill\": \"green\",\n    \"shape\": \"dot\",\n    \"text\": \"{{object_id}}: {{payload}}\"\n}",
            "output": "json",
            "x": 910,
            "y": 220,
            "wires": [
                []
            ]
        },
        {
            "id": "bb9231a6ca8c0069",
            "type": "switch",
            "z": "625e0c3cc5957e33",
            "name": "",
            "property": "object_id",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "nnull"
                },
                {
                    "t": "else"
                }
            ],
            "checkall": "false",
            "repair": false,
            "outputs": 2,
            "x": 595,
            "y": 140,
            "wires": [
                [
                    "738ff25c657b58ce"
                ],
                [
                    "5177e369ac66ecde"
                ]
            ],
            "l": false
        },
        {
            "id": "5177e369ac66ecde",
            "type": "template",
            "z": "625e0c3cc5957e33",
            "name": "Object ID is empty",
            "field": "payload",
            "fieldType": "msg",
            "format": "json",
            "syntax": "mustache",
            "template": "{ \n    \"fill\": \"red\",\n    \"shape\": \"dot\",\n    \"text\": \"Object ID is empty.\"\n}",
            "output": "json",
            "x": 870,
            "y": 280,
            "wires": [
                []
            ]
        },
        {
            "id": "071fbfcd31c518c2",
            "type": "template",
            "z": "625e0c3cc5957e33",
            "name": "Waiting",
            "field": "payload",
            "fieldType": "msg",
            "format": "json",
            "syntax": "plain",
            "template": "{ \"fill\": \"grey\", \"shape\": \"ring\", \"text\": \"waiting\" }",
            "output": "json",
            "x": 900,
            "y": 460,
            "wires": [
                []
            ]
        },
        {
            "id": "f37860f007d95cb5",
            "type": "inject",
            "z": "625e0c3cc5957e33",
            "name": "",
            "props": [
                {
                    "p": "payload"
                }
            ],
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": 0.1,
            "topic": "",
            "payload": "true",
            "payloadType": "bool",
            "x": 720,
            "y": 460,
            "wires": [
                [
                    "071fbfcd31c518c2"
                ]
            ]
        },
        {
            "id": "6cee4f89311c3621",
            "type": "junction",
            "z": "625e0c3cc5957e33",
            "x": 970,
            "y": 160,
            "wires": [
                [
                    "80a5ad3061a8423a"
                ]
            ]
        }
    ]
}